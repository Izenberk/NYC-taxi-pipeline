services:
  minio:
    image: minio/minio
    container_name:  minio
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # MinIO Console
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      - shared-net
  
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark-app:/opt/spark-app
      - ./pipeline:/opt/pipeline
      - ./spark-app/jars:/opt/spark/jars
    networks:
      - shared-net


  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - ./spark-app:/opt/spark-app
      - ./pipeline:/opt/pipeline
      - ./spark-app/jars:/opt/spark/jars
    networks:
      - shared-net



  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - _AIRFLOW_WWW_USER_CREATE=True
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
      - _AIRFLOW_WWW_USER_EMAIL=admin@example.com
      - _AIRFLOW_WWW_USER_FIRSTNAME=Data
      - _AIRFLOW_WWW_USER_LASTNAME=Engineer
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/.dbt:/home/airflow/.dbt   # dbt profiles
      - ./dbt:/dbt                          # dbt project files
      - ./pipeline:/opt/pipeline            # ✅ mount your dev package directly
      - ./data:/opt/data
      - ./spark-app:/opt/spark-app  # ✅ Spark script lives here
      - ./spark-app/jars:/opt/spark-extra-jars
      - /var/run/docker.sock:/var/run/docker.sock
    command: bash -c "airflow db init && airflow users create \
      --username $$'_AIRFLOW_WWW_USER_USERNAME' \
      --firstname $$'_AIRFLOW_WWW_USER_FIRSTNAME' \
      --lastname $$'_AIRFLOW_WWW_USER_LASTNAME' \
      --role Admin \
      --email $$'_AIRFLOW_WWW_USER_EMAIL' \
      --password $$'_AIRFLOW_WWW_USER_PASSWORD'"
    networks:
      - shared-net

  airflow:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow
    restart: always
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    ports:
      - "8082:8080"
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/.dbt:/home/airflow/.dbt   # dbt profiles
      - ./dbt:/dbt                          # dbt project files
      - ./pipeline:/opt/pipeline            # ✅ mount your dev package directly
      - ./data:/opt/data
      - ./spark-app:/opt/spark-app  # ✅ Spark script lives here
      - ./spark-app/jars:/opt/spark-extra-jars
      - /var/run/docker.sock:/var/run/docker.sock
    command: webserver
    networks:
      - shared-net

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    restart: always
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
    volumes:
      - ./airflow:/opt/airflow
      - ./airflow/.dbt:/home/airflow/.dbt   # dbt profiles
      - ./dbt:/dbt                          # dbt project files
      - ./pipeline:/opt/pipeline            # ✅ mount your dev package directly
      - ./data:/opt/data
      - ./spark-app:/opt/spark-app  # ✅ Spark script lives here
      - ./spark-app/jars:/opt/spark-extra-jars
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler
    networks:
      - shared-net

volumes:
  minio_data:
  postgres_data:

networks:
  shared-net:
    name: shared-net